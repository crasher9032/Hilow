package hilostrabajo1;

import java.util.ArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JOptionPane;

/**
 *
 * @author tavod
 */
public class interfaz extends javax.swing.JFrame {
    private cliente cliente;
    private int tiempo;
    static int cont=1;

    /**
     * Creates new form interfaz
     */
    public interfaz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl2 = new javax.swing.JLabel();
        bar3 = new javax.swing.JProgressBar();
        bar1 = new javax.swing.JProgressBar();
        bar2 = new javax.swing.JProgressBar();
        lbl1 = new javax.swing.JLabel();
        lbl3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl2.setText("jLabel1");

        lbl1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl1.setText("jLabel1");

        lbl3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl3.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(96, 96, 96)
                .addComponent(lbl1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbl2)
                .addGap(189, 189, 189)
                .addComponent(lbl3)
                .addGap(97, 97, 97))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(bar1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(bar2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(bar3, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bar1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bar3, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bar2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbl2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        int numClientes=Integer.parseInt(JOptionPane.showInputDialog("Numero de clientes"));
        int numConsolas=3;
        ArrayList<cliente> clientes = new ArrayList<>();
        for (int i = 0; i < numClientes; i++) {
            clientes.add(new cliente(("Cliente "+i), (int)(Math.random()*20)+10));
        }
        ExecutorService executor = Executors.newFixedThreadPool(numConsolas);
        
        for(cliente cliente:clientes){
            Runnable us = new administracion(cliente);
            executor.execute(us);
        }
        executor.shutdown();
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JProgressBar bar1;
    private static javax.swing.JProgressBar bar2;
    private static javax.swing.JProgressBar bar3;
    private static javax.swing.JLabel lbl1;
    private static javax.swing.JLabel lbl2;
    private static javax.swing.JLabel lbl3;
    // End of variables declaration//GEN-END:variables
    static class administracion implements Runnable{
        private cliente cliente;
        private int tiempo;
        public administracion(cliente cliente){
            this.cliente=cliente;
        }
        public void run(){
            try {
                Thread.currentThread().wait(500);
            } catch (Exception e) {
            }
            if(cont<4){
                Thread.currentThread().setName("hilo"+cont);
                cont++;
            }
            System.out.println("La consola "+Thread.currentThread().getName()+" empezo a ser usada por "+
                    cliente.getNombre()+" por "+cliente.getTiempo()+" segundos");
            tiempo(cliente);
        }
        public void tiempo(cliente cliente){
            try {
                int x =(int)cliente.getTiempo();
                int avance=(int)(100/x);
                for (int i = 0; i < x; i++) {
                    int y=avance*i;
                    if("hilo1".equals(Thread.currentThread().getName().toString())){
                        lbl1.setText(cliente.getNombre());
                        bar1.setValue(y);
                    }
                    if("hilo2".equals(Thread.currentThread().getName().toString())){
                        lbl2.setText(cliente.getNombre());
                        bar2.setValue(y);
                    }
                    if("hilo3".equals(Thread.currentThread().getName().toString())){
                        lbl3.setText(cliente.getNombre());
                        bar3.setValue(y);
                    }
                    Thread.sleep(1000);
                }
            } catch (InterruptedException e) {
                if("hilo1".equals(Thread.currentThread().getName().toString())){
                    bar1.setValue(0);
                }
                if("hilo2".equals(Thread.currentThread().getName().toString())){
                    bar2.setValue(0);
                }
                if("hilo3".equals(Thread.currentThread().getName().toString())){
                    bar3.setValue(0);
                }
                Thread.currentThread().interrupt();
                System.out.println("Se termino de usar la consola "+Thread.currentThread().getName());
            }
        }
    }
}